#!/usr/bin/env python

Import('env')

javascript_files = [
    "os_javascript.cpp",
    "audio_driver_javascript.cpp",
    "javascript_main.cpp",
    "audio_server_javascript.cpp",
    "power_javascript.cpp",
    "javascript_eval.cpp",
]

env_javascript = env.Clone()
if env['target'] == "profile":
    env_javascript.Append(CPPFLAGS=['-DPROFILER_ENABLED'])

javascript_objects = []
for x in javascript_files:
    javascript_objects.append(env_javascript.Object(x))

env.Append(LINKFLAGS=["-s", "EXPORTED_FUNCTIONS=\"['_main','_audio_server_mix_function','_main_after_fs_sync','_send_notification']\""])
env.Append(LINKFLAGS=["--shell-file", '"platform/javascript/godot_shell.html"'])

# output file name without file extension
basename = "godot" + env["PROGSUFFIX"]
target_dir = env.Dir("#bin")
js_file = target_dir.File(basename + ".js")
implicit_targets = [js_file]

zip_dir = target_dir.Dir('.javascript_zip')
zip_files = env.InstallAs([zip_dir.File("godot.js"), zip_dir.File("godotfs.js")], [js_file, "#misc/dist/html_fs/godotfs.js"])

if env['wasm'] == 'yes':
    wasm_file = target_dir.File(basename+'.wasm')
    implicit_targets.append(wasm_file)
    zip_files.append(InstallAs(zip_dir.File('godot.wasm'), wasm_file))
else:
    asmjs_files = [target_dir.File(basename+'.asm.js'), target_dir.File(basename+'.html.mem')]
    zip_files.append(InstallAs([zip_dir.File('godot.asm.js'), zip_dir.File('godot.mem')], asmjs_files))
    implicit_targets.extend(asmjs_files)

# HTML file must be the first target in the list
html_file = env.Program(["#bin/godot"] + implicit_targets, javascript_objects, PROGSUFFIX=env["PROGSUFFIX"]+".html")[0]
Depends(html_file, "godot_shell.html")

# Emscripten hardcodes file names, so replace common base name with
# placeholder while leaving extension; also change `.html.mem` to just `.mem`
fixup_html = env.Substfile(html_file, SUBST_DICT=[(basename, '$$GODOT_BASE'), ('.html.mem', '.mem')], SUBSTFILESUFFIX='.fixup.html')

zip_files.append(InstallAs(zip_dir.File('godot.html'), fixup_html))
Zip('#bin/godot', zip_files, ZIPSUFFIX=env['PROGSUFFIX']+env['ZIPSUFFIX'], ZIPROOT=zip_dir, ZIPCOMSTR="Archving $SOURCES as $TARGET")
