#!/usr/bin/env python

import os
Import('env')

def make_debug_mingw(target, source, env):
    os.system('objcopy --only-keep-debug %s %s.debug' % (target[0], target[0]))
    os.system('strip --strip-debug --strip-unneeded %s' % (target[0]))
    os.system('objcopy --add-gnu-debuglink=%s.debug %s' % (target[0], target[0]))

common_win = [
    "context_gl_win.cpp",
    "crash_handler_win.cpp",
    "os_windows.cpp",
    "ctxgl_procaddr.cpp",
    "key_mapping_win.cpp",
    "tcp_server_winsock.cpp",
    "packet_peer_udp_winsock.cpp",
    "stream_peer_winsock.cpp",
    "joypad.cpp",
    "power_windows.cpp",
    "windows_terminal_logger.cpp"
]

restarget = "godot_res" + env["OBJSUFFIX"]

obj = env.RES(restarget, 'godot_res.rc')

common_win.append(obj)

binary = env.Program('#bin/godot', ['godot_win.cpp'] + common_win, PROGSUFFIX=env["PROGSUFFIX"])

# Microsoft Visual Studio Project Generation
if env['vsproj']:
    env.vs_srcs = env.vs_srcs + ["platform/windows/godot_win.cpp"]
    for x in common_win:
        env.vs_srcs = env.vs_srcs + ["platform/windows/" + str(x)]

if not os.getenv("VCINSTALLDIR"):
    if env["debug_symbols"] == "full" or env["debug_symbols"] == "yes":
        env.AddPostAction(binary, make_debug_mingw)
