#!/usr/bin/env python

Import('env')
Import('env_modules')

env_thekla_unwrap = env_modules.Clone()

# Thirdparty source files
if env['builtin_thekla_atlas']:
    thirdparty_dir = "#thirdparty/thekla_atlas/"
    thirdparty_sources = [
        "nvcore/Memory.cpp",
        "nvcore/Debug.cpp",
        "nvcore/StrLib.cpp",
        "nvcore/FileSystem.cpp",
        "nvcore/RadixSort.cpp",
        "nvmath/Basis.cpp",
        "nvmath/ConvexHull.cpp",
        "nvmath/Fitting.cpp",
        "nvmath/Plane.cpp",
        "nvmath/ProximityGrid.cpp",
        "nvmath/Random.cpp",
        "nvmath/Solver.cpp",
        "nvmath/Sparse.cpp",
        "nvmath/TypeSerialization.cpp",
        "poshlib/posh.c",
        "nvimage/BitMap.cpp",
        "nvimage/Image.cpp",
        "nvmesh/BaseMesh.cpp",
        "nvmesh/MeshBuilder.cpp",
        "nvmesh/TriMesh.cpp",
        "nvmesh/QuadTriMesh.cpp",
        "nvmesh/MeshTopology.cpp",
        "nvmesh/halfedge/Edge.cpp",
        "nvmesh/halfedge/Mesh.cpp",
        "nvmesh/halfedge/Face.cpp",
        "nvmesh/halfedge/Vertex.cpp",
        "nvmesh/geometry/Bounds.cpp",
        "nvmesh/geometry/Measurements.cpp",
        "nvmesh/raster/Raster.cpp",
        "nvmesh/param/Atlas.cpp",
        "nvmesh/param/AtlasBuilder.cpp",
        "nvmesh/param/AtlasPacker.cpp",
        "nvmesh/param/LeastSquaresConformalMap.cpp",
        "nvmesh/param/OrthogonalProjectionMap.cpp",
        "nvmesh/param/ParameterizationQuality.cpp",
        "nvmesh/param/SingleFaceMap.cpp",
        "nvmesh/param/Util.cpp",
        "nvmesh/weld/VertexWeld.cpp",
        "nvmesh/weld/Snap.cpp",
        "thekla/thekla_atlas.cpp"
    ]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    env_thekla_unwrap.add_source_files(env.modules_sources, thirdparty_sources)
    env_thekla_unwrap.Append(CPPPATH=[thirdparty_dir, thirdparty_dir + "/poshlib", thirdparty_dir + "/nvcore", thirdparty_dir + "/nvmesh"])

    # upstream uses c++11
    env_thekla_unwrap.Append(CXXFLAGS="-std=gnu++11")

    if env["platform"] == 'x11':
        env_thekla_unwrap.Append(CCFLAGS=["-DNV_OS_LINUX"])
    elif env["platform"] == 'osx':
        env_thekla_unwrap.Append(CCFLAGS=["-DNV_OS_DARWIN"])
    elif env["platform"] == 'windows':
        env_thekla_unwrap.Append(CCFLAGS=["-DNV_OS_WIN32"])
        
# Godot source files
env_thekla_unwrap.add_source_files(env.modules_sources, "*.cpp")
