<?xml version="1.0" encoding="UTF-8" ?>
<class name="AudioEffectDistortion" inherits="AudioEffect" category="Core" version="3.0.alpha.custom_build">
	<brief_description>
		Adds a Distortion audio effect to an Audio bus.
		Modify the sound to make it dirty.
	</brief_description>
	<description>
		Modify the sound and make it dirty. Differents types available : clip, tan, lofi (bit crushing), overdrive, or waveshape.
		By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="get_drive" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_keep_hf_hz" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_mode" qualifiers="const">
			<return type="int" enum="AudioEffectDistortion.Mode">
			</return>
			<description>
			</description>
		</method>
		<method name="get_post_gain" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pre_gain" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="set_drive">
			<return type="void">
			</return>
			<argument index="0" name="drive" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_keep_hf_hz">
			<return type="void">
			</return>
			<argument index="0" name="keep_hf_hz" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mode">
			<return type="void">
			</return>
			<argument index="0" name="mode" type="int" enum="AudioEffectDistortion.Mode">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_post_gain">
			<return type="void">
			</return>
			<argument index="0" name="post_gain" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pre_gain">
			<return type="void">
			</return>
			<argument index="0" name="pre_gain" type="float">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="drive" type="float" setter="set_drive" getter="get_drive">
			Distortion power. Value can range from 0 to 1. Default value: [code]0[/code].
		</member>
		<member name="keep_hf_hz" type="float" setter="set_keep_hf_hz" getter="get_keep_hf_hz">
			High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: [code]16000[/code].
		</member>
		<member name="mode" type="int" setter="set_mode" getter="get_mode" enum="AudioEffectDistortion.Mode">
			Distortion type. Default value: [code]MODE_CLIP[/code].
		</member>
		<member name="post_gain" type="float" setter="set_post_gain" getter="get_post_gain">
			Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: [code]0[/code].
		</member>
		<member name="pre_gain" type="float" setter="set_pre_gain" getter="get_pre_gain">
			Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: [code]0[/code].
		</member>
	</members>
	<constants>
		<constant name="MODE_CLIP" value="0">
			Digital distortion effect which cuts off peaks at the top and bottom of the waveform.
		</constant>
		<constant name="MODE_ATAN" value="1">
		</constant>
		<constant name="MODE_LOFI" value="2">
			Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices.
		</constant>
		<constant name="MODE_OVERDRIVE" value="3">
			Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers.
		</constant>
		<constant name="MODE_WAVESHAPE" value="4">
			Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.
		</constant>
	</constants>
</class>
