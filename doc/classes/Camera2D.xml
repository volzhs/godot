<?xml version="1.0" encoding="UTF-8" ?>
<class name="Camera2D" inherits="Node2D" category="Core" version="3.0.alpha.custom_build">
	<brief_description>
		Camera node for 2D scenes.
	</brief_description>
	<description>
		Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.
		This node is intended to be a simple helper get get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="align">
			<return type="void">
			</return>
			<description>
				Align the camera to the tracked node
			</description>
		</method>
		<method name="clear_current">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="force_update_scroll">
			<return type="void">
			</return>
			<description>
				Force the camera to update scroll immediately.
			</description>
		</method>
		<method name="get_anchor_mode" qualifiers="const">
			<return type="int" enum="Camera2D.AnchorMode">
			</return>
			<description>
			</description>
		</method>
		<method name="get_camera_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Return the camera position.
			</description>
		</method>
		<method name="get_camera_screen_center" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_custom_viewport" qualifiers="const">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="get_drag_margin" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="margin" type="int" enum="Margin">
			</argument>
			<description>
				Return the margins needed to drag the camera (see [method set_drag_margin]).
			</description>
		</method>
		<method name="get_follow_smoothing" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_h_offset" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_limit" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="margin" type="int" enum="Margin">
			</argument>
			<description>
				Return the scrolling limit in pixels.
			</description>
		</method>
		<method name="get_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Return the scroll offset.
			</description>
		</method>
		<method name="get_v_offset" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_zoom" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="is_current" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Return true of this is the current camera (see [method make_current]).
			</description>
		</method>
		<method name="is_follow_smoothing_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_h_drag_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_limit_drawing_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_limit_smoothing_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_margin_drawing_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_rotating" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_screen_drawing_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_v_drag_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="make_current">
			<return type="void">
			</return>
			<description>
				Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.
			</description>
		</method>
		<method name="reset_smoothing">
			<return type="void">
			</return>
			<description>
				Set the camera's position immediately to its current smoothing destination.
				This has no effect if smoothing is disabled.
			</description>
		</method>
		<method name="set_anchor_mode">
			<return type="void">
			</return>
			<argument index="0" name="anchor_mode" type="int" enum="Camera2D.AnchorMode">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_viewport">
			<return type="void">
			</return>
			<argument index="0" name="viewport" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_drag_margin">
			<return type="void">
			</return>
			<argument index="0" name="margin" type="int" enum="Margin">
			</argument>
			<argument index="1" name="drag_margin" type="float">
			</argument>
			<description>
				Set the margins needed to drag the camera (relative to the screen size). Margin uses the MARGIN_* enum. Drag margins of 0,0,0,0 will keep the camera at the center of the screen, while drag margins of 1,1,1,1 will only move when the camera is at the edges.
			</description>
		</method>
		<method name="set_enable_follow_smoothing">
			<return type="void">
			</return>
			<argument index="0" name="follow_smoothing" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_follow_smoothing">
			<return type="void">
			</return>
			<argument index="0" name="follow_smoothing" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_h_drag_enabled">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_h_offset">
			<return type="void">
			</return>
			<argument index="0" name="ofs" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_limit">
			<return type="void">
			</return>
			<argument index="0" name="margin" type="int" enum="Margin">
			</argument>
			<argument index="1" name="limit" type="int">
			</argument>
			<description>
				Set the scrolling limit in pixels.
			</description>
		</method>
		<method name="set_limit_drawing_enabled">
			<return type="void">
			</return>
			<argument index="0" name="limit_drawing_enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_limit_smoothing_enabled">
			<return type="void">
			</return>
			<argument index="0" name="limit_smoothing_enabled" type="bool">
			</argument>
			<description>
				Smooth camera when reaching camera limits.
				This requires camera smoothing being enabled to have a noticeable effect.
			</description>
		</method>
		<method name="set_margin_drawing_enabled">
			<return type="void">
			</return>
			<argument index="0" name="margin_drawing_enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_offset">
			<return type="void">
			</return>
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<description>
				Set the scroll offset. Useful for looking around or camera shake animations.
			</description>
		</method>
		<method name="set_rotating">
			<return type="void">
			</return>
			<argument index="0" name="rotating" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_screen_drawing_enabled">
			<return type="void">
			</return>
			<argument index="0" name="screen_drawing_enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_v_drag_enabled">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_v_offset">
			<return type="void">
			</return>
			<argument index="0" name="ofs" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_zoom">
			<return type="void">
			</return>
			<argument index="0" name="zoom" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="anchor_mode" type="int" setter="set_anchor_mode" getter="get_anchor_mode" enum="Camera2D.AnchorMode">
		</member>
		<member name="current" type="bool" setter="_set_current" getter="is_current">
		</member>
		<member name="drag_margin_bottom" type="float" setter="set_drag_margin" getter="get_drag_margin">
		</member>
		<member name="drag_margin_h_enabled" type="bool" setter="set_h_drag_enabled" getter="is_h_drag_enabled">
		</member>
		<member name="drag_margin_left" type="float" setter="set_drag_margin" getter="get_drag_margin">
		</member>
		<member name="drag_margin_right" type="float" setter="set_drag_margin" getter="get_drag_margin">
		</member>
		<member name="drag_margin_top" type="float" setter="set_drag_margin" getter="get_drag_margin">
		</member>
		<member name="drag_margin_v_enabled" type="bool" setter="set_v_drag_enabled" getter="is_v_drag_enabled">
		</member>
		<member name="editor_draw_drag_margin" type="bool" setter="set_margin_drawing_enabled" getter="is_margin_drawing_enabled">
		</member>
		<member name="editor_draw_limits" type="bool" setter="set_limit_drawing_enabled" getter="is_limit_drawing_enabled">
		</member>
		<member name="editor_draw_screen" type="bool" setter="set_screen_drawing_enabled" getter="is_screen_drawing_enabled">
		</member>
		<member name="limit_bottom" type="int" setter="set_limit" getter="get_limit">
		</member>
		<member name="limit_left" type="int" setter="set_limit" getter="get_limit">
		</member>
		<member name="limit_right" type="int" setter="set_limit" getter="get_limit">
		</member>
		<member name="limit_smoothed" type="bool" setter="set_limit_smoothing_enabled" getter="is_limit_smoothing_enabled">
		</member>
		<member name="limit_top" type="int" setter="set_limit" getter="get_limit">
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset">
		</member>
		<member name="rotating" type="bool" setter="set_rotating" getter="is_rotating">
		</member>
		<member name="smoothing_enabled" type="bool" setter="set_enable_follow_smoothing" getter="is_follow_smoothing_enabled">
		</member>
		<member name="smoothing_speed" type="float" setter="set_follow_smoothing" getter="get_follow_smoothing">
		</member>
		<member name="zoom" type="Vector2" setter="set_zoom" getter="get_zoom">
		</member>
	</members>
	<constants>
		<constant name="ANCHOR_MODE_DRAG_CENTER" value="1">
		</constant>
		<constant name="ANCHOR_MODE_FIXED_TOP_LEFT" value="0">
		</constant>
	</constants>
</class>
