<?xml version="1.0" encoding="UTF-8" ?>
<class name="RayCast2D" inherits="Node2D" category="Core" version="3.0.alpha.custom_build">
	<brief_description>
		Query the closest object intersecting a ray.
	</brief_description>
	<description>
		A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.
		RayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.
		Only enabled raycasts will be able to query the space and report collisions.
		RayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="add_exception">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
				Adds a collision exception so the ray does not report collisions with the specified node.
			</description>
		</method>
		<method name="add_exception_rid">
			<return type="void">
			</return>
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
				Adds a collision exception so the ray does not report collisions with the specified [RID].
			</description>
		</method>
		<method name="clear_exceptions">
			<return type="void">
			</return>
			<description>
				Removes all collision exceptions for this ray.
			</description>
		</method>
		<method name="force_raycast_update">
			<return type="void">
			</return>
			<description>
				Updates the collision information for the ray.  Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.
			</description>
		</method>
		<method name="get_cast_to" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Return the destination point of this ray object.
			</description>
		</method>
		<method name="get_collider" qualifiers="const">
			<return type="Object">
			</return>
			<description>
				Returns the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
				Example:
				[codeblock]
				if RayCast2D.is_colliding():
					var collider = RayCast2D.get_collider()
				[/codeblock]
			</description>
		</method>
		<method name="get_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
				Example:
				[codeblock]
				if RayCast2D.is_colliding():
					var shape = RayCast2D.get_collider_shape()
				[/codeblock]
			</description>
		</method>
		<method name="get_collision_layer" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the collision layer for this ray.
			</description>
		</method>
		<method name="get_collision_normal" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the normal of the intersecting object's shape at the collision point.
			</description>
		</method>
		<method name="get_collision_point" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.
			</description>
		</method>
		<method name="get_exclude_parent_body" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether this ray should hit your parent node, if it's a body.
			</description>
		</method>
		<method name="get_type_mask" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [Physics2DDirectSpaceState].
			</description>
		</method>
		<method name="is_colliding" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).
			</description>
		</method>
		<method name="is_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether this raycast is enabled or not.
			</description>
		</method>
		<method name="remove_exception">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
				Removes a collision exception so the ray does report collisions with the specified node.
			</description>
		</method>
		<method name="remove_exception_rid">
			<return type="void">
			</return>
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
				Removes a collision exception so the ray does report collisions with the specified [RID].
			</description>
		</method>
		<method name="set_cast_to">
			<return type="void">
			</return>
			<argument index="0" name="local_point" type="Vector2">
			</argument>
			<description>
				Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code]
			</description>
		</method>
		<method name="set_collision_layer">
			<return type="void">
			</return>
			<argument index="0" name="layer" type="int">
			</argument>
			<description>
				Set the mask to filter objects. Only objects with at least the same mask element set will be detected.
			</description>
		</method>
		<method name="set_enabled">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.
			</description>
		</method>
		<method name="set_exclude_parent_body">
			<return type="void">
			</return>
			<argument index="0" name="mask" type="bool">
			</argument>
			<description>
				Toggle whether this ray should hit your parent node, if it's a body.
			</description>
		</method>
		<method name="set_type_mask">
			<return type="void">
			</return>
			<argument index="0" name="mask" type="int">
			</argument>
			<description>
				Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [Physics2DDirectSpaceState], eg. [code]Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.
			</description>
		</method>
	</methods>
	<members>
		<member name="cast_to" type="Vector2" setter="set_cast_to" getter="get_cast_to">
			The ray's destination point, relative to the RayCast's [code]position[/code].
		</member>
		<member name="collision_layer" type="int" setter="set_collision_layer" getter="get_collision_layer">
			The RayCast2D's collison layer(s). Only bodies in the same collision layer(s) will be detected.
		</member>
		<member name="enabled" type="bool" setter="set_enabled" getter="is_enabled">
			If [code]true[/code], collisions will be reported. Default value: [code]false[/code].
		</member>
		<member name="exclude_parent" type="bool" setter="set_exclude_parent_body" getter="get_exclude_parent_body">
			If [code]true[/code], the parent node will be excluded from collision detection. Default value: [code]true[/code].
		</member>
		<member name="type_mask" type="int" setter="set_type_mask" getter="get_type_mask">
			Object types to detect using a logical sum (OR operation) of type constants defined in [Physics2DDirectSpaceState].
			Example:
			[codeblock]
			RayCast.type_mask = Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY
			[/codeblock]
		</member>
	</members>
	<constants>
	</constants>
</class>
