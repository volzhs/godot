<?xml version="1.0" encoding="UTF-8" ?>
<class name="Particles2D" inherits="Node2D" category="Core" version="3.0.alpha.custom_build">
	<brief_description>
		2D particle emitter.
	</brief_description>
	<description>
		2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.
		Use the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="capture_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_amount" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of particles spawned at each emission
			</description>
		</method>
		<method name="get_draw_order" qualifiers="const">
			<return type="int" enum="Particles2D.DrawOrder">
			</return>
			<description>
			</description>
		</method>
		<method name="get_explosiveness_ratio" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_fixed_fps" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_fractional_delta" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_h_frames" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_lifetime" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Gets the amount of seconds that each particle will be visible.
			</description>
		</method>
		<method name="get_normal_map" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_one_shot" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pre_process_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_process_material" qualifiers="const">
			<return type="Material">
			</return>
			<description>
			</description>
		</method>
		<method name="get_randomness_ratio" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_speed_scale" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
				Returns the texture for emitted particles
			</description>
		</method>
		<method name="get_use_local_coordinates" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_v_frames" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_visibility_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="is_emitting" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether this emitter is currently emitting or not
			</description>
		</method>
		<method name="restart">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="set_amount">
			<return type="void">
			</return>
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
				Sets the amount of particles spawned at each emission
			</description>
		</method>
		<method name="set_draw_order">
			<return type="void">
			</return>
			<argument index="0" name="order" type="int" enum="Particles2D.DrawOrder">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_emitting">
			<return type="void">
			</return>
			<argument index="0" name="emitting" type="bool">
			</argument>
			<description>
				If this is set to true then the particle emitter will emit particles, if its false it will not.
			</description>
		</method>
		<method name="set_explosiveness_ratio">
			<return type="void">
			</return>
			<argument index="0" name="ratio" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_fixed_fps">
			<return type="void">
			</return>
			<argument index="0" name="fps" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_fractional_delta">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_h_frames">
			<return type="void">
			</return>
			<argument index="0" name="frames" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_lifetime">
			<return type="void">
			</return>
			<argument index="0" name="secs" type="float">
			</argument>
			<description>
				Sets the amount of seconds that each particle will be visible.
			</description>
		</method>
		<method name="set_normal_map">
			<return type="void">
			</return>
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_one_shot">
			<return type="void">
			</return>
			<argument index="0" name="secs" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pre_process_time">
			<return type="void">
			</return>
			<argument index="0" name="secs" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_material">
			<return type="void">
			</return>
			<argument index="0" name="material" type="Material">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_randomness_ratio">
			<return type="void">
			</return>
			<argument index="0" name="ratio" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_speed_scale">
			<return type="void">
			</return>
			<argument index="0" name="scale" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_texture">
			<return type="void">
			</return>
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_use_local_coordinates">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_v_frames">
			<return type="void">
			</return>
			<argument index="0" name="frames" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_visibility_rect">
			<return type="void">
			</return>
			<argument index="0" name="aabb" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="amount" type="int" setter="set_amount" getter="get_amount">
			Number of particles to emit.
		</member>
		<member name="draw_order" type="int" setter="set_draw_order" getter="get_draw_order" enum="Particles2D.DrawOrder">
			Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].
		</member>
		<member name="emitting" type="bool" setter="set_emitting" getter="is_emitting">
			If [code]true[/code] particles are being emitted. Default value: [code]true[/code].
		</member>
		<member name="explosiveness" type="float" setter="set_explosiveness_ratio" getter="get_explosiveness_ratio">
			Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code].
		</member>
		<member name="fixed_fps" type="int" setter="set_fixed_fps" getter="get_fixed_fps">
		</member>
		<member name="fract_delta" type="bool" setter="set_fractional_delta" getter="get_fractional_delta">
		</member>
		<member name="h_frames" type="int" setter="set_h_frames" getter="get_h_frames">
			Number of horizontal frames in [code]texture[/code].
		</member>
		<member name="lifetime" type="float" setter="set_lifetime" getter="get_lifetime">
			Amount of time each particle will exist. Default value: [code]1[/code].
		</member>
		<member name="local_coords" type="bool" setter="set_use_local_coordinates" getter="get_use_local_coordinates">
			If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].
		</member>
		<member name="normal_map" type="Texture" setter="set_normal_map" getter="get_normal_map">
		</member>
		<member name="one_shot" type="bool" setter="set_one_shot" getter="get_one_shot">
			If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code].
		</member>
		<member name="preprocess" type="float" setter="set_pre_process_time" getter="get_pre_process_time">
		</member>
		<member name="process_material" type="Material" setter="set_process_material" getter="get_process_material">
			[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].
		</member>
		<member name="randomness" type="float" setter="set_randomness_ratio" getter="get_randomness_ratio">
			Emission randomness ratio. Default value: [code]0[/code].
		</member>
		<member name="speed_scale" type="float" setter="set_speed_scale" getter="get_speed_scale">
			Speed scaling ratio. Default value: [code]1[/code].
		</member>
		<member name="texture" type="Texture" setter="set_texture" getter="get_texture">
			Particle texture. If [code]null[/code] particles will be squares.
		</member>
		<member name="v_frames" type="int" setter="set_v_frames" getter="get_v_frames">
			Number of vertical frames in [code]texture[/code].
		</member>
		<member name="visibility_rect" type="Rect2" setter="set_visibility_rect" getter="get_visibility_rect">
		</member>
	</members>
	<constants>
		<constant name="DRAW_ORDER_INDEX" value="0">
			Particles are drawn in the order emitted.
		</constant>
		<constant name="DRAW_ORDER_LIFETIME" value="1">
			Particles are drawn in order of remaining lifetime.
		</constant>
	</constants>
</class>
