<?xml version="1.0" encoding="UTF-8" ?>
<class name="Spatial" inherits="Node" category="Core" version="3.0.alpha.custom_build">
	<brief_description>
		Most basic 3D game object, parent of all 3D related nodes.
	</brief_description>
	<description>
		Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use Spatial as a parent node to move, scale, rotate and show/hide children in a 3D project.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="get_gizmo" qualifiers="const">
			<return type="SpatialGizmo">
			</return>
			<description>
				Returns the SpatialGizmo for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
				Returns the global transform, relative to worldspace.
			</description>
		</method>
		<method name="get_parent_spatial" qualifiers="const">
			<return type="Spatial">
			</return>
			<description>
				Returns the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial].
			</description>
		</method>
		<method name="get_rotation" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
				Returns the rotation (in radians).
			</description>
		</method>
		<method name="get_rotation_deg" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
				Returns the rotation (in degrees).
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
				Returns the local transform, relative to the bone parent.
			</description>
		</method>
		<method name="get_translation" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="get_world" qualifiers="const">
			<return type="World">
			</return>
			<description>
				Returns the current [World] resource this Spatial node is registered to.
			</description>
		</method>
		<method name="global_rotate">
			<return type="void">
			</return>
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<argument index="1" name="radians" type="float">
			</argument>
			<description>
				Rotates the current node along normal [Vector3] by angle in radians in Global space.
			</description>
		</method>
		<method name="global_translate">
			<return type="void">
			</return>
			<argument index="0" name="offset" type="Vector3">
			</argument>
			<description>
				Moves the node by [Vector3] offset in Global space.
			</description>
		</method>
		<method name="hide">
			<return type="void">
			</return>
			<description>
				Disables rendering of this node. Change Spatial Visible property to false.
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether node notifies about its local transformation changes. Spatial will not propagate this by default.
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.
			</description>
		</method>
		<method name="is_visible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether the node is set to be visible.
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether the node is visible, taking into consideration that its parents visibility.
			</description>
		</method>
		<method name="look_at">
			<return type="void">
			</return>
			<argument index="0" name="target" type="Vector3">
			</argument>
			<argument index="1" name="up" type="Vector3">
			</argument>
			<description>
				Rotates itself to point into direction of target position. Operations take place in global space.
			</description>
		</method>
		<method name="look_at_from_position">
			<return type="void">
			</return>
			<argument index="0" name="position" type="Vector3">
			</argument>
			<argument index="1" name="target" type="Vector3">
			</argument>
			<argument index="2" name="up" type="Vector3">
			</argument>
			<description>
				Moves the node to specified position and then rotates itself to point into direction of target position. Operations take place in global space.
			</description>
		</method>
		<method name="orthonormalize">
			<return type="void">
			</return>
			<description>
				Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation. Performs orthonormalization on this node [Transform3D].
			</description>
		</method>
		<method name="rotate">
			<return type="void">
			</return>
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<argument index="1" name="radians" type="float">
			</argument>
			<description>
				Rotates the node in local space on given normal [Vector3] by angle in radians.
			</description>
		</method>
		<method name="rotate_x">
			<return type="void">
			</return>
			<argument index="0" name="radians" type="float">
			</argument>
			<description>
				Rotates the node in local space on X axis by angle in radians.
			</description>
		</method>
		<method name="rotate_y">
			<return type="void">
			</return>
			<argument index="0" name="radians" type="float">
			</argument>
			<description>
				Rotates the node in local space on Y axis by angle in radians.
			</description>
		</method>
		<method name="rotate_z">
			<return type="void">
			</return>
			<argument index="0" name="radians" type="float">
			</argument>
			<description>
				Rotates the node in local space on Z axis by angle in radians.
			</description>
		</method>
		<method name="set_as_toplevel">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Makes the node ignore its parents tranformations. Node tranformations are only in global space.
			</description>
		</method>
		<method name="set_gizmo">
			<return type="void">
			</return>
			<argument index="0" name="gizmo" type="SpatialGizmo">
			</argument>
			<description>
				Set [SpatialGizmo] for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.
			</description>
		</method>
		<method name="set_global_transform">
			<return type="void">
			</return>
			<argument index="0" name="global" type="Transform">
			</argument>
			<description>
				Set the transform globally, relative to world space.
			</description>
		</method>
		<method name="set_identity">
			<return type="void">
			</return>
			<description>
				Reset all tranformations for this node. Set its [Transform3D] to identity matrix.
			</description>
		</method>
		<method name="set_ignore_transform_notification">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Set whether the node ignores notification that its transformation (global or local) changed.
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Set whether the node notifies about its local transformation changes. Spatial will not propagate this by default.
			</description>
		</method>
		<method name="set_notify_transform">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Set whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.
			</description>
		</method>
		<method name="set_rotation">
			<return type="void">
			</return>
			<argument index="0" name="rotation_rad" type="Vector3">
			</argument>
			<description>
				Set the rotation (in radians).
			</description>
		</method>
		<method name="set_rotation_deg">
			<return type="void">
			</return>
			<argument index="0" name="rotation_deg" type="Vector3">
			</argument>
			<description>
				Set the rotation (in degrees).
			</description>
		</method>
		<method name="set_scale">
			<return type="void">
			</return>
			<argument index="0" name="scale" type="Vector3">
			</argument>
			<description>
				Set the scale.
			</description>
		</method>
		<method name="set_transform">
			<return type="void">
			</return>
			<argument index="0" name="local" type="Transform">
			</argument>
			<description>
				Set the transform locally, relative to the parent spatial node.
			</description>
		</method>
		<method name="set_translation">
			<return type="void">
			</return>
			<argument index="0" name="translation" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_visible">
			<return type="void">
			</return>
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="show">
			<return type="void">
			</return>
			<description>
				Enables rendering of this node. Change Spatial Visible property to "True".
			</description>
		</method>
		<method name="to_global" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="local_point" type="Vector3">
			</argument>
			<description>
				Tranforms [Vector3] "local_point" from this node's local space to world space.
			</description>
		</method>
		<method name="to_local" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="global_point" type="Vector3">
			</argument>
			<description>
				Tranforms [Vector3] "global_point" from world space to this node's local space.
			</description>
		</method>
		<method name="translate">
			<return type="void">
			</return>
			<argument index="0" name="offset" type="Vector3">
			</argument>
			<description>
				Changes the node's position by given offset [Vector3].
			</description>
		</method>
		<method name="update_gizmo">
			<return type="void">
			</return>
			<description>
				Updates the [SpatialGizmo] of this node.
			</description>
		</method>
	</methods>
	<members>
		<member name="global_transform" type="Transform" setter="set_global_transform" getter="get_global_transform">
			World space (global) [Transform] of this node.
		</member>
		<member name="rotation" type="Vector3" setter="set_rotation" getter="get_rotation">
			Local euler rotation in radians of this node.
		</member>
		<member name="rotation_deg" type="Vector3" setter="set_rotation_deg" getter="get_rotation_deg">
			Local euler rotation in degrees of this node.
		</member>
		<member name="scale" type="Vector3" setter="set_scale" getter="get_scale">
			Local scale of this node.
		</member>
		<member name="transform" type="Transform" setter="set_transform" getter="get_transform">
			Local space [Transform] of this node.
		</member>
		<member name="translation" type="Vector3" setter="set_translation" getter="get_translation">
			Local translation of this node.
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible">
			Visibility of this node. Toggles if this node is rendered.
		</member>
	</members>
	<signals>
		<signal name="visibility_changed">
			<description>
				Emitted when node visibility changes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="29" enum="">
			Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.
			In order for NOTIFICATION_TRANSFORM_CHANGED to work user first needs to ask for it, with set_notify_transform(true).
		</constant>
		<constant name="NOTIFICATION_ENTER_WORLD" value="41" enum="">
			Spatial nodes receives this notification when they are registered to new [World] resource.
		</constant>
		<constant name="NOTIFICATION_EXIT_WORLD" value="42" enum="">
			Spatial nodes receives this notification when they are unregistered from current [World] resource.
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="43" enum="">
			Spatial nodes receives this notification when their visibility changes.
		</constant>
	</constants>
</class>
