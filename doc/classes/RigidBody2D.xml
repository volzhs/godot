<?xml version="1.0" encoding="UTF-8" ?>
<class name="RigidBody2D" inherits="PhysicsBody2D" category="Core" version="3.0-alpha">
	<brief_description>
		A body that is controlled by the 2D physics engine.
	</brief_description>
	<description>
		This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.
		A RigidBody2D has 4 behavior modes (see [member mode]):
		- [b]Rigid[/b]: The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.
		- [b]Static[/b]: The body behaves like a [StaticBody2D] and does not move.
		- [b]Character[/b]: Similar to [code]Rigid[/code] mode, but the body can not rotate.
		- [b]Kinematic[/b]: The body behaves like a [KinematicBody2D], and must be moved by code.
		[b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.
		If you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="_integrate_forces" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="state" type="Physics2DDirectBodyState">
			</argument>
			<description>
				Allows you to read and safely modify the simulation state for the object. Use this instead of [Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.
			</description>
		</method>
		<method name="add_force">
			<return type="void">
			</return>
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<argument index="1" name="force" type="Vector2">
			</argument>
			<description>
				Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void">
			</return>
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<argument index="1" name="impulse" type="Vector2">
			</argument>
			<description>
				Applies a positioned impulse to the body (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied instantaneously. Both the impulse and the offset from the body origin are in global coordinates.
			</description>
		</method>
		<method name="get_angular_damp" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the angular damp for this body.
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the body angular velocity. This changes by physics granularity. See [method set_angular_velocity].
			</description>
		</method>
		<method name="get_applied_force" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the body's total applied force.
			</description>
		</method>
		<method name="get_applied_torque" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the body's total applied torque.
			</description>
		</method>
		<method name="get_bounce" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the body bounciness.
			</description>
		</method>
		<method name="get_colliding_bodies" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns a list of the bodies colliding with this one. Use [member contacts_reported] to set the maximum number reported. You must also set [member contact_monitor] to [code]true[/code].
			</description>
		</method>
		<method name="get_continuous_collision_detection_mode" qualifiers="const">
			<return type="int" enum="RigidBody2D.CCDMode">
			</return>
			<description>
				Return whether this body is using continuous collision detection.
			</description>
		</method>
		<method name="get_friction" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the body friction.
			</description>
		</method>
		<method name="get_gravity_scale" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the gravity factor.
			</description>
		</method>
		<method name="get_inertia" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the body's moment of inertia, which is computed automatically from the body's mass and assigned [Shape2D]s during the physics frame. Note that it will not yet have a value in the [code]_ready()[/code] function.
			</description>
		</method>
		<method name="get_linear_damp" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the linear damp for this body.
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the body's linear velocity. This changes when a physics frame has passed, not during a normal update. See [method set_linear_velocity].
			</description>
		</method>
		<method name="get_mass" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the body mass.
			</description>
		</method>
		<method name="get_max_contacts_reported" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Return the maximum contacts that can be reported. See [method set_max_contacts_reported].
			</description>
		</method>
		<method name="get_mode" qualifiers="const">
			<return type="int" enum="RigidBody2D.Mode">
			</return>
			<description>
				Return the current body mode, see [method set_mode].
			</description>
		</method>
		<method name="get_weight" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Return the body weight given standard earth-weight (gravity 9.8).
			</description>
		</method>
		<method name="is_able_to_sleep" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Return true if the body has the ability to fall asleep when not moving. See [method set_can_sleep].
			</description>
		</method>
		<method name="is_contact_monitor_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Return whether contact monitoring is enabled.
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Return whether the body is sleeping.
			</description>
		</method>
		<method name="is_using_custom_integrator">
			<return type="bool">
			</return>
			<description>
				Return true if the body is not doing any built-in force integration.
			</description>
		</method>
		<method name="set_angular_damp">
			<return type="void">
			</return>
			<argument index="0" name="angular_damp" type="float">
			</argument>
			<description>
				Set the angular damp for this body. If this value is different from -1, any angular damp derived from the world or areas will be overridden.
			</description>
		</method>
		<method name="set_angular_velocity">
			<return type="void">
			</return>
			<argument index="0" name="angular_velocity" type="float">
			</argument>
			<description>
				Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
			</description>
		</method>
		<method name="set_applied_force">
			<return type="void">
			</return>
			<argument index="0" name="force" type="Vector2">
			</argument>
			<description>
				Sets the applied force vector. This is the equivalent of firing a rocket: the force is applied constantly.
			</description>
		</method>
		<method name="set_applied_torque">
			<return type="void">
			</return>
			<argument index="0" name="torque" type="float">
			</argument>
			<description>
				Sets the applied torque.
			</description>
		</method>
		<method name="set_axis_velocity">
			<return type="void">
			</return>
			<argument index="0" name="axis_velocity" type="Vector2">
			</argument>
			<description>
				Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
			</description>
		</method>
		<method name="set_bounce">
			<return type="void">
			</return>
			<argument index="0" name="bounce" type="float">
			</argument>
			<description>
				Set the body bounciness, from 0 (no bounce) to 1 (full bounce).
			</description>
		</method>
		<method name="set_can_sleep">
			<return type="void">
			</return>
			<argument index="0" name="able_to_sleep" type="bool">
			</argument>
			<description>
				Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.
				Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
			</description>
		</method>
		<method name="set_contact_monitor">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Enable contact monitoring. This allows the body to emit signals when it collides with another.
			</description>
		</method>
		<method name="set_continuous_collision_detection_mode">
			<return type="void">
			</return>
			<argument index="0" name="mode" type="int" enum="RigidBody2D.CCDMode">
			</argument>
			<description>
				Set the continuous collision detection mode from the enum CCD_MODE_*.
				Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.
			</description>
		</method>
		<method name="set_friction">
			<return type="void">
			</return>
			<argument index="0" name="friction" type="float">
			</argument>
			<description>
				Set the body friction, from 0 (frictionless) to 1 (full friction).
			</description>
		</method>
		<method name="set_gravity_scale">
			<return type="void">
			</return>
			<argument index="0" name="gravity_scale" type="float">
			</argument>
			<description>
				Set the gravity factor. This factor multiplies gravity intensity just for this body.
			</description>
		</method>
		<method name="set_inertia">
			<return type="void">
			</return>
			<argument index="0" name="inertia" type="float">
			</argument>
			<description>
				Set the body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.
			</description>
		</method>
		<method name="set_linear_damp">
			<return type="void">
			</return>
			<argument index="0" name="linear_damp" type="float">
			</argument>
			<description>
				Set the linear damp for this body. If this value is different from -1, any linear damp derived from the world or areas will be overridden.
			</description>
		</method>
		<method name="set_linear_velocity">
			<return type="void">
			</return>
			<argument index="0" name="linear_velocity" type="Vector2">
			</argument>
			<description>
				Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
			</description>
		</method>
		<method name="set_mass">
			<return type="void">
			</return>
			<argument index="0" name="mass" type="float">
			</argument>
			<description>
				Set the body mass.
			</description>
		</method>
		<method name="set_max_contacts_reported">
			<return type="void">
			</return>
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
				Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
			</description>
		</method>
		<method name="set_mode">
			<return type="void">
			</return>
			<argument index="0" name="mode" type="int" enum="RigidBody2D.Mode">
			</argument>
			<description>
				Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.
			</description>
		</method>
		<method name="set_sleeping">
			<return type="void">
			</return>
			<argument index="0" name="sleeping" type="bool">
			</argument>
			<description>
				Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
			</description>
		</method>
		<method name="set_use_custom_integrator">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.
			</description>
		</method>
		<method name="set_weight">
			<return type="void">
			</return>
			<argument index="0" name="weight" type="float">
			</argument>
			<description>
				Set the body weight given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels.
			</description>
		</method>
		<method name="test_motion">
			<return type="bool">
			</return>
			<argument index="0" name="motion" type="Vector2">
			</argument>
			<argument index="1" name="margin" type="float" default="0.08">
			</argument>
			<argument index="2" name="result" type="Physics2DTestMotionResult" default="null">
			</argument>
			<description>
				Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one).
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp">
			Damps the body's [member angular_velocity]. If [code]-1[/code] the body will use the "Default Angular Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: [code]-1[/code].
		</member>
		<member name="angular_velocity" type="float" setter="set_angular_velocity" getter="get_angular_velocity">
			The body's rotational velocity.
		</member>
		<member name="bounce" type="float" setter="set_bounce" getter="get_bounce">
			The body's bounciness. Default value: [code]0[/code].
		</member>
		<member name="can_sleep" type="bool" setter="set_can_sleep" getter="is_able_to_sleep">
			If [code]true[/code] the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using [method apply_impulse] or [method add_force]. Default value: [code]true[/code].
		</member>
		<member name="contact_monitor" type="bool" setter="set_contact_monitor" getter="is_contact_monitor_enabled">
			If [code]true[/code] the body will emit signals when it collides with another RigidBody2D. See also [member contacts_reported]. Default value: [code]false[/code].
		</member>
		<member name="contacts_reported" type="int" setter="set_max_contacts_reported" getter="get_max_contacts_reported">
			The maximum number of contacts to report. Default value: [code]0[/code].
		</member>
		<member name="continuous_cd" type="int" setter="set_continuous_collision_detection_mode" getter="get_continuous_collision_detection_mode" enum="RigidBody2D.CCDMode">
			Continuous collision detection mode. Default value: [code]CCD_MODE_DISABLED[/code].
			Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [code]CCD_MODE_[/code] constants for details.
		</member>
		<member name="custom_integrator" type="bool" setter="set_use_custom_integrator" getter="is_using_custom_integrator">
			If [code]true[/code] internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function.
		</member>
		<member name="friction" type="float" setter="set_friction" getter="get_friction">
			The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction). Default value: [code]1[/code].
		</member>
		<member name="gravity_scale" type="float" setter="set_gravity_scale" getter="get_gravity_scale">
			Multiplies the gravity applied to the body. The body's gravity is calculated from the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d" and/or any additional gravity vector applied by [Area2D]s. Default value: [code]1[/code].
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp">
			Damps the body's [member linear_velocity]. If [code]-1[/code] the body will use the "Default Linear Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: [code]-1[/code].
		</member>
		<member name="linear_velocity" type="Vector2" setter="set_linear_velocity" getter="get_linear_velocity">
			The body's linear velocity.
		</member>
		<member name="mass" type="float" setter="set_mass" getter="get_mass">
			The body's mass. Default value: [code]1[/code].
		</member>
		<member name="mode" type="int" setter="set_mode" getter="get_mode" enum="RigidBody2D.Mode">
			The body's mode. See [code]MODE_*[/code] constants. Default value: [code]MODE_RIGID[/code].
		</member>
		<member name="sleeping" type="bool" setter="set_sleeping" getter="is_sleeping">
			If [code]true[/code] the body is sleeping and will not calculate forces until woken up by a collision or by using [method apply_impulse] or [method add_force].
		</member>
		<member name="weight" type="float" setter="set_weight" getter="get_weight">
			The body's weight based on its mass and the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d".
		</member>
	</members>
	<signals>
		<signal name="body_entered">
			<argument index="0" name="body" type="Object">
			</argument>
			<description>
				Emitted when a body enters into contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].
			</description>
		</signal>
		<signal name="body_exited">
			<argument index="0" name="body" type="Object">
			</argument>
			<description>
				Emitted when a body exits contact with this one. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].
			</description>
		</signal>
		<signal name="body_shape_entered">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
				Emitted when a body enters into contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].
			</description>
		</signal>
		<signal name="body_shape_exited">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
				Emitted when a body shape exits contact with this one. Reports colliding shape information. See [CollisionObject2D] for shape index information. [member contact_monitor] must be [code]true[/code] and [member contacts_reported] greater than [code]0[/code].
			</description>
		</signal>
		<signal name="sleeping_state_changed">
			<description>
				Emitted when [member sleeping] changes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_RIGID" value="0">
			Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.
		</constant>
		<constant name="MODE_STATIC" value="1">
			Static mode. The body behaves like a [StaticBody2D] and does not move.
		</constant>
		<constant name="MODE_CHARACTER" value="2">
			Character mode. Similar to [code]MODE_RIGID[/code], but the body can not rotate.
		</constant>
		<constant name="MODE_KINEMATIC" value="3">
			Kinematic mode. The body behaves like a [KinematicBody2D], and must be moved by code.
		</constant>
		<constant name="CCD_MODE_DISABLED" value="0">
			Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
		</constant>
		<constant name="CCD_MODE_CAST_RAY" value="1">
			Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.
		</constant>
		<constant name="CCD_MODE_CAST_SHAPE" value="2">
			Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.
		</constant>
	</constants>
</class>
