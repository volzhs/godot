<?xml version="1.0" encoding="UTF-8" ?>
<class name="Viewport" inherits="Node" category="Core" version="3.0-beta">
	<brief_description>
		Creates a sub-view into the screen.
	</brief_description>
	<description>
		A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.
		Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.
		If a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.
		Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
		Also, viewports can be assigned to different screens in case the devices have multiple screens.
		Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="find_world" qualifiers="const">
			<return type="World">
			</return>
			<description>
				Return the 3D world of the viewport, or if no such present, the one of the parent viewport.
			</description>
		</method>
		<method name="find_world_2d" qualifiers="const">
			<return type="World2D">
			</return>
			<description>
				Return the 2D world of the viewport.
			</description>
		</method>
		<method name="get_camera" qualifiers="const">
			<return type="Camera">
			</return>
			<description>
				Return the active 3D camera.
			</description>
		</method>
		<method name="get_canvas_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
				Get the canvas transform of the viewport.
			</description>
		</method>
		<method name="get_final_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
				Get the total transform of the viewport.
			</description>
		</method>
		<method name="get_global_canvas_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
				Get the global canvas transform of the viewport.
			</description>
		</method>
		<method name="get_mouse_position" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Get the mouse position, relative to the viewport.
			</description>
		</method>
		<method name="get_render_info">
			<return type="int">
			</return>
			<argument index="0" name="info" type="int" enum="Viewport.RenderInfo">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_size_override" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Get the size override set with [method set_size_override].
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="ViewportTexture">
			</return>
			<description>
				Get the viewport's texture, for use with various objects that you want to texture with the viewport.
			</description>
		</method>
		<method name="get_viewport_rid" qualifiers="const">
			<return type="RID">
			</return>
			<description>
				Get the viewport RID from the [VisualServer].
			</description>
		</method>
		<method name="get_visible_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
				Return the final, visible rect in global screen coordinates.
			</description>
		</method>
		<method name="get_world_2d" qualifiers="const">
			<return type="World2D">
			</return>
			<description>
				Return the 2D world of the viewport.
			</description>
		</method>
		<method name="gui_get_drag_data" qualifiers="const">
			<return type="Variant">
			</return>
			<description>
				Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].
			</description>
		</method>
		<method name="gui_has_modal_stack" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether there are shown modals on-screen.
			</description>
		</method>
		<method name="input">
			<return type="void">
			</return>
			<argument index="0" name="local_event" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_size_override_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Get the enabled status of the size override set with [method set_size_override].
			</description>
		</method>
		<method name="is_size_override_stretch_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Get the enabled status of the size strech override set with [method set_size_override_stretch].
			</description>
		</method>
		<method name="set_attach_to_screen_rect">
			<return type="void">
			</return>
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_canvas_transform">
			<return type="void">
			</return>
			<argument index="0" name="xform" type="Transform2D">
			</argument>
			<description>
				Set the canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.
			</description>
		</method>
		<method name="set_global_canvas_transform">
			<return type="void">
			</return>
			<argument index="0" name="xform" type="Transform2D">
			</argument>
			<description>
				Set the global canvas transform of the viewport. The canvas transform is relative to this.
			</description>
		</method>
		<method name="set_size_override">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<argument index="1" name="size" type="Vector2" default="Vector2( -1, -1 )">
			</argument>
			<argument index="2" name="margin" type="Vector2" default="Vector2( 0, 0 )">
			</argument>
			<description>
				Set the size override of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.
			</description>
		</method>
		<method name="set_size_override_stretch">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Set whether the size override affects stretch as well.
			</description>
		</method>
		<method name="set_world_2d">
			<return type="void">
			</return>
			<argument index="0" name="world_2d" type="World2D">
			</argument>
			<description>
			</description>
		</method>
		<method name="unhandled_input">
			<return type="void">
			</return>
			<argument index="0" name="local_event" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
		<method name="update_worlds">
			<return type="void">
			</return>
			<description>
				Force update of the 2D and 3D worlds.
			</description>
		</method>
		<method name="warp_mouse">
			<return type="void">
			</return>
			<argument index="0" name="to_position" type="Vector2">
			</argument>
			<description>
				Warp the mouse to a position, relative to the viewport.
			</description>
		</method>
	</methods>
	<members>
		<member name="arvr" type="bool" setter="set_use_arvr" getter="use_arvr">
		</member>
		<member name="audio_listener_enable_2d" type="bool" setter="set_as_audio_listener_2d" getter="is_audio_listener_2d">
		</member>
		<member name="audio_listener_enable_3d" type="bool" setter="set_as_audio_listener" getter="is_audio_listener">
		</member>
		<member name="debug_draw" type="int" setter="set_debug_draw" getter="get_debug_draw" enum="Viewport.DebugDraw">
		</member>
		<member name="disable_3d" type="bool" setter="set_disable_3d" getter="is_3d_disabled">
		</member>
		<member name="gui_disable_input" type="bool" setter="set_disable_input" getter="is_input_disabled">
		</member>
		<member name="gui_snap_controls_to_pixels" type="bool" setter="set_snap_controls_to_pixels" getter="is_snap_controls_to_pixels_enabled">
		</member>
		<member name="hdr" type="bool" setter="set_hdr" getter="get_hdr">
		</member>
		<member name="msaa" type="int" setter="set_msaa" getter="get_msaa" enum="Viewport.MSAA">
		</member>
		<member name="own_world" type="bool" setter="set_use_own_world" getter="is_using_own_world">
		</member>
		<member name="physics_object_picking" type="bool" setter="set_physics_object_picking" getter="get_physics_object_picking">
		</member>
		<member name="render_target_clear_mode" type="int" setter="set_clear_mode" getter="get_clear_mode" enum="Viewport.ClearMode">
		</member>
		<member name="render_target_update_mode" type="int" setter="set_update_mode" getter="get_update_mode" enum="Viewport.UpdateMode">
		</member>
		<member name="render_target_v_flip" type="bool" setter="set_vflip" getter="get_vflip">
		</member>
		<member name="shadow_atlas_quad_0" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv">
		</member>
		<member name="shadow_atlas_quad_1" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv">
		</member>
		<member name="shadow_atlas_quad_2" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv">
		</member>
		<member name="shadow_atlas_quad_3" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv">
		</member>
		<member name="shadow_atlas_size" type="int" setter="set_shadow_atlas_size" getter="get_shadow_atlas_size">
		</member>
		<member name="size" type="Vector2" setter="set_size" getter="get_size">
		</member>
		<member name="transparent_bg" type="bool" setter="set_transparent_background" getter="has_transparent_background">
		</member>
		<member name="usage" type="int" setter="set_usage" getter="get_usage" enum="Viewport.Usage">
		</member>
		<member name="world" type="World" setter="set_world" getter="get_world">
		</member>
	</members>
	<signals>
		<signal name="size_changed">
			<description>
				Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="UPDATE_DISABLED" value="0" enum="UpdateMode">
			Do not update the render target.
		</constant>
		<constant name="UPDATE_ONCE" value="1" enum="UpdateMode">
			Update the render target once, then switch to [code]UPDATE_DISABLED[/code]
		</constant>
		<constant name="UPDATE_WHEN_VISIBLE" value="2" enum="UpdateMode">
			Update the render target only when it is visible. This is the default value.
		</constant>
		<constant name="UPDATE_ALWAYS" value="3" enum="UpdateMode">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED" value="0" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_1" value="1" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_4" value="2" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_16" value="3" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_64" value="4" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_256" value="5" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_1024" value="6" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_MAX" value="7" enum="ShadowAtlasQuadrantSubdiv">
		</constant>
		<constant name="RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_VERTICES_IN_FRAME" value="1" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_DRAW_CALLS_IN_FRAME" value="5" enum="RenderInfo">
		</constant>
		<constant name="RENDER_INFO_MAX" value="6" enum="RenderInfo">
		</constant>
		<constant name="DEBUG_DRAW_DISABLED" value="0" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_UNSHADED" value="1" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_OVERDRAW" value="2" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_WIREFRAME" value="3" enum="DebugDraw">
		</constant>
		<constant name="MSAA_DISABLED" value="0" enum="MSAA">
		</constant>
		<constant name="MSAA_2X" value="1" enum="MSAA">
		</constant>
		<constant name="MSAA_4X" value="2" enum="MSAA">
		</constant>
		<constant name="MSAA_8X" value="3" enum="MSAA">
		</constant>
		<constant name="MSAA_16X" value="4" enum="MSAA">
		</constant>
		<constant name="USAGE_2D" value="0" enum="Usage">
		</constant>
		<constant name="USAGE_2D_NO_SAMPLING" value="1" enum="Usage">
		</constant>
		<constant name="USAGE_3D" value="2" enum="Usage">
		</constant>
		<constant name="USAGE_3D_NO_EFFECTS" value="3" enum="Usage">
		</constant>
		<constant name="CLEAR_MODE_ALWAYS" value="0" enum="ClearMode">
		</constant>
		<constant name="CLEAR_MODE_NEVER" value="1" enum="ClearMode">
		</constant>
		<constant name="CLEAR_MODE_ONLY_NEXT_FRAME" value="2" enum="ClearMode">
		</constant>
	</constants>
</class>
